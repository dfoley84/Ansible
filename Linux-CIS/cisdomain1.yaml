---
- name: 'CIS Domain 1'
  hosts: localhost
  become: yes
  tasks:
    - name: "SCORED | 1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled"
      block:
        - name: "Install Cramfs"
          ansible.builtin.lineinfile:
            dest: /etc/modprobe.d/CIS.conf
            #   dest: /etc/modprobe.d/cramfs.conf
            regexp: "^(#)?install cramfs(\\s|$)"
            line: "install cramfs /bin/true"
            create: yes

        - name: "SCORED | 1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled"
          command: rmmod cramfs
          register: result
          failed_when: "result.rc|float < 1"


    - name: "SCORED | 1.1.1.2 | PATCH | Ensure mounting of hfs filesystems is disabled"
      block:
        - name: "part one"
          lineinfile:
            dest: /etc/modprobe.d/CIS.conf
            #   dest: /etc/modprobe.d/hfs.conf
            regexp: "^(#)?install hfs(\\s|$)"
            line: "install hfs /bin/true"
            create: yes

        - name: "SCORED | 1.1.1.2 | PATCH | Ensure mounting of hfs filesystems is disabled"
          command: rmmod hfs
          register: result
          failed_when: "result.rc|float < 1"


    - name: "SCORED | 1.1.1.3 | PATCH | Ensure mounting of hfsplus filesystems is disabled"
      block:
        - lineinfile:
            dest: /etc/modprobe.d/CIS.conf
            #    dest: /etc/modprobe.d/hfsplus.conf
            regexp: "^(#)?install hfsplus(\\s|$)"
            line: "install hfsplus /bin/true"
            create: yes

        - name: "SCORED | 1.1.1.3 | PATCH | Ensure mounting of hfsplus filesystems is disabled"
          command: rmmod hfsplus
          register: result
          failed_when: "result.rc|float < 1"


    - name: "SCORED | 1.1.1.4 | PATCH | Ensure mounting of squashfs filesystems is disabled"
      lineinfile:
        dest: /etc/modprobe.d/CIS.conf
        #    dest: /etc/modprobe.d/squashfs.conf
        regexp: "^(#)?install squashfs(\\s|$)"
        line: "install squashfs /bin/true"
        create: yes


    - name: "SCORED | 1.1.1.4 | PATCH | Ensure mounting of squashfs filesystems is disabled"
      command: rmmod squashfs
      register: result
      failed_when: "result.rc|float < 1"
      changed_when:
        - result.rc|float == 1
        - '"ERROR" in result.stderr'


    - name: "SCORED | 1.1.1.5 | PATCH | Ensure mounting of udf filesystems is disabled"
      lineinfile:
        dest: /etc/modprobe.d/CIS.conf
        regexp: "^(#)?install udf(\\s|$)"
        line: "install udf /bin/true"
        create: yes

    - name: "SCORED | 1.1.1.5 | PATCH | Ensure mounting of udf filesystems is disabled"
      command: rmmod udf
      register: result
      failed_when: "result.rc|float < 1"
      changed_when:
        - result.rc|float == 1
        - '"ERROR" in result.stderr'

    - name: 1.1.2 Ensure /tmp is configured
      ansible.builtin.command: |
        systemctl unmask tmp.mount
        systemctl enable tmp.mount


    - name: 1.1.6 Ensure separate partition exists for /var (Scored)
      command: grep '\s/var\s' /etc/fstab
      register: var_partition
      failed_when: var_partition.rc == 1
      changed_when: false
      ignore_errors: true
      check_mode: no

    - yum:
        name: python-pip
        state: present
      check_mode: no
      when:
        - var_partition.rc == 0


    - name: install dependencies for mountopts-module
      pip:
        name: fstab
      when:
        - var_partition.rc == 0


    - name: "SCORED | 1.1.11 | PATCH | Ensure separate partition exists for /var/log"
      shell: mount | grep "on /var/log "
      register: var_log_mounted
      changed_when: no
      failed_when: no


    - name: "SCORED | 1.1.12 | PATCH | Ensure separate partition exists for /var/log/audit"
      shell: mount | grep "on /var/log/audit "
      register: var_log_audit_mounted
      changed_when: no
      failed_when: no


    - name: "SCORED | 1.1.13 | PATCH | Ensure separate partition exists for /home"
      shell: mount | grep "on /home "
      register: home_mounted
      changed_when: no
      failed_when: no


    - name: "SCORED | 1.1.14 | PATCH | Ensure nodev option set on /home partition"
      mount:
        path: /home
        opts: nodev
        state: mounted
        fstype: "ext4"
        src: home
      when:
        - home_mounted is defined
        - home_mounted.rc|float == 0


    - name: "SCORED | 1.1.15 | PATCH | Ensure nodev option set on /dev/shm partition\n
              SCORED | 1.1.16 | PATCH | Ensure nosuid option set on /dev/shm partition\n
              SCORED | 1.1.17 | PATCH | Ensure noexec option set on /dev/shm partition"
      mount:
        name: /dev/shm
        src: tmpfs
        state: mounted
        fstype: tmpfs
        opts: "defaults,nodev,nosuid,noexec"


    - name: "SCORED | 1.1.18 | PATCH | Ensure sticky bit is set on all world-writable directories"
      shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
      #when: sticky_bit_on_worldwritable_dirs_audit.rc == '0'


 


    - name: "NOTSCORED | 1.2.1 | PATCH | Ensure package manager repositories are configured"
      command: /bin/true
      changed_when: no


    - name: "NOTSCORED | 1.2.2 | PATCH | Ensure GPG keys are configured"
      command: /bin/true
      changed_when: no


    - name: "SCORED | 1.2.3 | PATCH | Ensure gpgcheck is globally activated"
      replace:
        name: /etc/yum.conf
        regexp: "^gpgcheck=0"
        replace: "gpgcheck=1"


    - name: "SCORED | 1.2.3 | PATCH | Ensure gpgcheck is globally activated"
      find:
        paths: /etc/yum.repos.d
        patterns: "*.repo"
      register: yum_repos
      changed_when: no


    - name: "SCORED | 1.2.3 | PATCH | Ensure gpgcheck is globally activated"
      replace:
        name: "{{ item.path }}"
        regexp: "^gpgcheck=0"
        replace: "gpgcheck=1"
      with_items:
        - "{{ yum_repos.files }}"


    - name: "SCORED | 1.3.1 | PATCH | Ensure AIDE is installed"
      yum:
        name: aide
        state: present


    - name: "SCORED | 1.3.1 | PATCH | Ensure AIDE is installed"
      command: /usr/sbin/aide --init
      async: 45
      poll: 0
      check_mode: no


    - name: "SCORED | 1.3.1 | PATCH | Ensure AIDE is installed"
      command: mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz


    - name: "SCORED | 1.4.1 | PATCH | Ensure permissions on bootloader config are configured"
      stat:
        path: /boot/grub2/grub.cfg
      #   path: /boot/grub/menu.lst
      register: grub_cfg

    - name: "SCORED | 1.4.1 | PATCH | Ensure permissions on bootloader config are configured"
      file:
        path: "{{ grub_cfg.stat.lnk_source }}"
        owner: root
        group: root
        mode: "og-rwx"
        state: file
      when:
        - grub_cfg is defined
        - grub_cfg.stat.exists and grub_cfg.stat.islnk


    - name : "SCORED | 1.4.2 | PATCH | Ensure authentication required for single user mode"
      lineinfile:
        state: present
        dest: "{{ item }}"
        regexp: "^ExecStart="
        line: "ExecStart=-/bin/sh -c \"/sbin/sulogin; /usr/bin/systemctl --fail --no-block default\""
      with_items:
        - /usr/lib/systemd/system/rescue.service
        - /usr/lib/systemd/system/emergency.service


    - name: "SCORED | 1.5.1 | PATCH | Ensure core dumps are restricted"
      lineinfile:
        state: present
        dest: /etc/security/limits.conf
        regexp: '^#?\\*.*core'
        line: '* hard core 0'
        insertbefore: '^# End of file'


    - name: "SCORED | 1.5.1 | PATCH | Ensure core dumps are restricted"
      sysctl:
        name: fs.suid_dumpable
        value: 0
        state: present
        reload: yes
        sysctl_set: yes
        ignoreerrors: yes


    - name: "SCORED | 1.5.2 | PATCH | Ensure address space layout randomization (ASLR) is enabled"
      sysctl:
        name: kernel.randomize_va_space
        value: 2
        state: present
        reload: yes
        sysctl_set: yes
        ignoreerrors: yes


    - name: "SCORED | 1.5.3 | PATCH | Ensure prelink is disabled"
      command: prelink -ua
      when:
        - prelink_installed is defined and prelink_installed.rc == 0


    - name: "SCORED | 1.5.3 | PATCH | Ensure prelink is disabled"
      yum:
        name: prelink
        state: absent


    - name: "SCORED | 1.6.1.1 | PATCH | Ensure SELinux is not disabled in bootloader configuration"
      replace:
        dest: /etc/default/grub
        regexp: '(selinux|enforcing)\s*=\s*0\s*'
        follow: yes
      register: selinux_grub_patch
      ignore_errors: yes
      notify: generate new grub config


  

    - name: "SCORED | 1.6.1.4 | PATCH | Ensure SETroubleshoot is not installed"
      yum:
        name: setroubleshoot
        state: absent


    - name: "SCORED | 1.6.1.5 | PATCH | Ensure the MCS Translation Service (mcstrans) is not installed"
      yum:
        name: mcstrans
        state: absent


    - name: "SCORED | 1.6.1.6 | PATCH | Ensure no unconfined daemons exist"
      command: /bin/true
      changed_when: no


    - name: "SCORED | 1.6.2 | PATCH | Ensure SELinux is installed"
      yum:
        name: libselinux
        state: present

    - stat: path=/etc/motd
      register: motd_link


    - command: /usr/sbin/update-motd --disable
      ignore_errors: true

    - name: "NOTSCORED | 1.7.1.4 | PATCH | Ensure permissions on /etc/motd are configured"
      stat: path=/etc/motd
      register: motd_link

    - name: "NOTSCORED | 1.7.1.4 | PATCH | Ensure permissions on /etc/motd are configured"
      command: /usr/sbin/update-motd --disable
      when:
        - motd_link.islink is defined and motd_link.stat.islink
      ignore_errors: true


    - name: "NOTSCORED | 1.7.1.4 | PATCH | Ensure permissions on /etc/motd are configured"
      file:
        path: /etc/motd
        state: file
        owner: root
        group: root
        mode: 0644
      when:
        - motd_link.islink is defined and motd_link.stat.islink == False
      ignore_errors: true


    - name: "SCORED | 1.7.1.5 | PATCH | Ensure permissions on /etc/issue are configured"
      file:
        dest: /etc/issue
        state: file
        owner: root
        group: root
        mode: 0644


    - name: "NOTSCORED | 1.7.1.6 | PATCH | Ensure permissions on /etc/issue.net are configured"
      file:
        dest: /etc/issue.net
        state: file
        owner: root
        group: root
        mode: 0644

